trigger:
- master

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  TextTransformerImageName: 'lisesoee2/texttransformer:$(Build.BuildId)'
  SpoomerismImageName: 'lisesoee2/spoonerismmicroservice:$(Build.BuildId)'

stages:
  - stage: build
    displayName: Build  
    pool:
      vmImage: 'windows-latest'

    jobs:
      - job: BuildApplication
        displayName: Build Application
        steps:
        - task: NuGetToolInstaller@1

        - task: NuGetCommand@2
          inputs:
            restoreSolution: '$(solution)'

        - task: UseDotNet@2
          displayName: 'Use .NET SDK v7.x'
          inputs:
            version: '7.x'

        - task: DotNetCoreCLI@2
          displayName: 'Restore project dependencies'
          inputs:
            command: 'restore'
            projects: '**/*.csproj'

        - task: DotNetCoreCLI@2
          displayName: 'Build the project - $(buildConfiguration)'
          inputs:
            command: 'build'
            arguments: '--no-restore --configuration $(buildConfiguration)'
            projects: '**/*.csproj'

        - task: DotNetCoreCLI@2
          displayName: 'Install .NET tools from local manifest'
          inputs:
            command: custom
            custom: tool
            arguments: 'restore'

        - task: DotNetCoreCLI@2
          displayName: 'Publish the project - $(buildConfiguration)'
          inputs:
            command: 'publish'
            projects: '**/*.csproj'
            publishWebProjects: false
            arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
            zipAfterPublish: true

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact: drop'
          condition: succeeded()

  - stage: test
    displayName: Test
    pool:
      vmImage: 'windows-latest'
    jobs:
      - job: TestApplication
        displayName: Test Application
        steps:
 
        - task: DotNetCoreCLI@2
          displayName: Run Dotnet tests
          inputs:
            command: test
            projects: '**/*Test*/*.csproj'
            arguments: '--configuration $(buildConfiguration)'            

  - stage: deliver
    displayName: Deliver
    pool:
      vmImage: 'windows-latest'
    jobs:
      - job: DeliverApplication
        displayName: Deliver Application
        steps:
        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: Write-Host "Pretend delivery done"
      
      - job: TextTransformerDockerImage
        displayName: Build and push TextTransformer Docker image
        steps:
        - task: Docker@1
          displayName: 'Build the Docker image'
          inputs:
            containerregistrytype: 'Container Registry'
            dockerRegistryEndpoint: 'Docker Hub'
            command: 'Build an image'
            dockerFile: '$(Build.SourcesDirectory)/TextTransformation/Dockerfile'
            imageName: '$(TextTransformerImageName)'
            includeLatestTag: true
            useDefaultContext: false
            buildContext: '.'
        - task: Docker@1
          displayName: 'Push TextTransformer Docker image to Dockerhub'
          inputs:
            containerregistrytype: 'Container Registry'
            dockerRegistryEndpoint: 'Docker Hub'
            command: 'Push an image'
            imageName: '$(TextTransformerImageName)'
          condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) 

